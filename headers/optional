/*  Copyright (C) 2019  Povilas Kanapickas <povilas@radix.lt>

    This file is part of cppreference-doc

    This work is licensed under the Creative Commons Attribution-ShareAlike 3.0
    Unported License. To view a copy of this license, visit
    http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to Creative
    Commons, 444 Castro Street, Suite 900, Mountain View, California, 94041, USA.

    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.3 or
    any later version published by the Free Software Foundation; with no
    Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
*/

#ifndef CPPREFERENCE_OPTIONAL_H
#define CPPREFERENCE_OPTIONAL_H

#if CPPREFERENCE_STDVER >= 2017

#include <functional> // hash
#include <utility> // in_place_t, ...
#include <type_traits> // decay_t
#include <exception> // exception

namespace std {

struct nullopt_t {};

inline constexpr nullopt_t nullopt;

class bad_optional_access : public exception {
public:
    ~bad_optional_access() override;
    const char * what() const override;
};

template<class T>
class optional {
public:
    using value_type = T;

    constexpr optional();
    constexpr optional(std::nullopt_t);
    constexpr optional(const optional& other);

    constexpr optional(optional&& other);

    template <class U>
    optional(const optional<U>& other);

    template<class U>
    optional(optional<U>&& other);

    template<class... Args>
    constexpr explicit optional(in_place_t, Args&&... args);

    template<class U, class... Args>
    constexpr explicit optional(in_place_t,
                                initializer_list<U> ilist,
                                Args&&... args);

    template<class U = value_type>
    constexpr optional(U&& value);

    ~optional();

    optional& operator=(std::nullopt_t);

    constexpr optional& operator=(const optional& other);

    constexpr optional& operator=(optional&& other);

    template<class U = T>
    optional& operator=(U&& value);

    template<class U>
    optional& operator=(const optional<U>& other);

    template<class U>
    optional& operator=(optional<U>&& other);

    constexpr const T* operator->() const;

    constexpr T* operator->();

    constexpr const T& operator*() const&;

    constexpr T& operator*() &;

    constexpr const T&& operator*() const&&;

    constexpr T&& operator*() &&;

    constexpr explicit operator bool() const;

    constexpr bool has_value() const;

    constexpr T& value() &;
    constexpr const T & value() const &;

    constexpr T&& value() &&;
    constexpr const T&& value() const &&;

    template< class U >
    constexpr T value_or(U&& default_value) const&;

    template< class U >
    constexpr T value_or(U&& default_value) &&;

    void swap(optional& other);

    void reset();

    template<class... Args>
    T& emplace(Args&&... args);

    template<class U, class... Args>
    T& emplace(initializer_list<U> ilist, Args&&... args);
};

template<class T, class U>
constexpr bool operator==(const optional<T>& lhs, const optional<U>& rhs);

template<class T, class U>
constexpr bool operator!=(const optional<T>& lhs, const optional<U>& rhs);

template<class T, class U>
constexpr bool operator<(const optional<T>& lhs, const optional<U>& rhs);

template<class T, class U>
constexpr bool operator<=(const optional<T>& lhs, const optional<U>& rhs);

template<class T, class U>
constexpr bool operator>(const optional<T>& lhs, const optional<U>& rhs);

template<class T, class U>
constexpr bool operator>=(const optional<T>& lhs, const optional<U>& rhs);

template<class T>
constexpr bool operator==(const optional<T>& opt, nullopt_t);

template<class T>
constexpr bool operator==(nullopt_t, const optional<T>& opt);

template<class T>
constexpr bool operator!=(const optional<T>& opt, nullopt_t);

template<class T>
constexpr bool operator!=(nullopt_t, const optional<T>& opt);

template<class T>
constexpr bool operator<(const optional<T>& opt, nullopt_t);

template<class T>
constexpr bool operator<(nullopt_t, const optional<T>& opt);

template<class T>
constexpr bool operator<=(const optional<T>& opt, nullopt_t);

template<class T>
constexpr bool operator<=(nullopt_t, const optional<T>& opt);

template<class T>
constexpr bool operator>(const optional<T>& opt, nullopt_t);

template<class T>
constexpr bool operator>(nullopt_t, const optional<T>& opt);

template<class T>
constexpr bool operator>=(const optional<T>& opt, nullopt_t);

template<class T>
constexpr bool operator>=(nullopt_t, const optional<T>& opt);


template<class T, class U>
constexpr bool operator==(const optional<T>& opt, const U& value);

template<class T, class U>
constexpr bool operator==(const T& value, const optional<U>& opt);

template<class T, class U>
constexpr bool operator!=(const optional<T>& opt, const U& value);

template<class T, class U>
constexpr bool operator!=(const T& value, const optional<U>& opt);

template<class T, class U>
constexpr bool operator<(const optional<T>& opt, const U& value);

template<class T, class U>
constexpr bool operator<(const T& value, const optional<U>& opt);

template<class T, class U>
constexpr bool operator<=(const optional<T>& opt, const U& value);

template<class T, class U>
constexpr bool operator<=(const T& value, const optional<U>& opt);

template<class T, class U>
constexpr bool operator>(const optional<T>& opt, const U& value);

template<class T, class U>
constexpr bool operator>(const T& value, const optional<U>& opt);

template<class T, class U>
constexpr bool operator>=(const optional<T>& opt, const U& value);

template<class T, class U>
constexpr bool operator>=(const T& value, const optional<U>& opt);

template<class T >
constexpr optional<decay_t<T>> make_optional(T&& value);

template<class T, class... Args >
constexpr optional<T> make_optional(Args&&... args);

template<class T, class U, class... Args >
constexpr optional<T> make_optional(initializer_list<U> il, Args&&... args);

template<class T>
void swap(optional<T>& lhs, optional<T>& rhs);

template<class T>
struct hash<std::optional<T>> {};


} // namespace std

#endif // CPPREFERENCE_STDVER >= 2017
#endif // CPPREFERENCE_OPTIONAL_H
